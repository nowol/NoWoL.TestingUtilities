<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Text.RegularExpressions" #>using System;
using NoWoL.TestingUtilities.Exceptions;
// ReSharper disable CheckNamespace
#pragma warning disable IDE0079 // Remove unnecessary suppression

<#
CreateException("NoWoL.TestingUtilities.ParameterRuleException", standardMessage: "Rule '{string ruleName}' for parameter '{string paramName}' was not respected.{<AddSpaceWhenRequired>string additionalReason}");
CreateException("NoWoL.TestingUtilities.UnconfiguredArgumentsException", standardMessage: "The following arguments have not been configured: {<JoinComma>System.Collections.Generic.IEnumerable<string> missingArguments}.");
CreateException("NoWoL.TestingUtilities.MissingObjectCreatorException", standardMessage: "Could not find an IObjectCreator for {<TypeFullName>Type type}.");
CreateException("NoWoL.TestingUtilities.UnsupportedInvalidTypeException", standardMessage: "Unable to generate an invalid value for type '{<TypeFullName>Type type}'.");
CreateException("NoWoL.TestingUtilities.UnsupportedTypeException");
#>

<#+

    public void CreateException(string fullName, string standardMessage = null)
    {
        var parts = fullName.Split('.');
        var className = parts.Last();
        var ns = String.Join(".", parts.Take(parts.Length - 1));
        var parameters = new List<(string type, string name)>();

#>
namespace <#= ns #>
{
    [Serializable]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    public class <#= className #> : Exception
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
    {
        /// <summary>
        /// Creates an instance of the <see cref="<#= className #>"/> class.
        /// </summary>
        public <#= className #>()
        {}
        
        /// <summary>
        /// Creates an instance of the <see cref="<#= className #>"/> class.
        /// </summary>
        /// <param name="message">Message of the exception</param>
        public <#= className #>(string message) 
            : base(message)
        {}

        /// <summary>
        /// Creates an instance of the <see cref="<#= className #>"/> class.
        /// </summary>
        /// <param name="message">Message of the exception</param>
        /// <param name="innerException">Optional inner exception</param>
        public <#= className #>(string message, Exception innerException)
            : base(message, innerException)
        {}

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= className #>"/> class.
        /// </summary>
        /// <param name="info">Serialization info</param>
        /// <param name="context">Serialization context</param>
        protected <#= className #>(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        {
        }
<#+
        if (standardMessage != null)
        {
            //var template = Regex.Replace(standardMessage, @"\{(?<param>[^{}]+)\}", new MatchEvaluator(ReplaceParameterMatch));
            var template = Regex.Replace(standardMessage, @"\{(?<Formatter><[^<>{}]+>)?\s*(?<DataType>[^ {}]+)\s+(?<ParamName>[^{}]+)\}", new MatchEvaluator(ReplaceParameterMatch));

#>

        /// <summary>
        /// Helper method to create the exception
        /// </summary>
        /// <param name="innerException">Optional inner exception</param>
        /// <returns>An instance of the <see cref="<#= className #>"/> exception</returns>
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment (but other parameters do)
        public static <#= className #> Create(<#= String.Join(", ", parameters.Select(x => $"{x.type} {x.name}")) #>, Exception innerException = null)
#pragma warning restore CS1573 // Parameter has no matching param tag in the XML comment (but other parameters do)
        {
#pragma warning disable CA1062 // Validate arguments of public methods
            return new <#= className #>($"<#= template #>", innerException);
#pragma warning restore CA1062 // Validate arguments of public methods
        }
<#+
            string ReplaceParameterMatch(Match match)
            {
                var dataType = match.Groups["DataType"].Value;
                var name = match.Groups["ParamName"].Value;
                
                parameters.Add((dataType, name));

                if (match.Groups["Formatter"].Success)
                {
                    var formatter = match.Groups["Formatter"].Value.Trim(new [] { '<', '>' });
                    return "{ExceptionFormatters." + formatter + "Formatter(" + name + ")}";
                }
                
                return "{" + name + "}";
            }	
        }

#>
    }
}
<#+
    }

#>